# 汎用ポータル 顧客マスタ（受信）
class Portal::PortalBatSend < Portal::PortalBatBase
  include AutoGenerated
  include DatetimeHelper
  include Validation
  private

  def batch_name
    '汎用ポータル_顧客マスタ（送信）'
  end

  def main
    rows = []
    @not_portal_list = []

    #消費先の最も新しい調査日のレコードを取得する
    hoten_sub_query = HotenkenDb.select('hotenken_dbs.HAN_CODE,hotenken_dbs.KOK_CODE,hotenken_dbs.TYOU_YMD')
    .where('id = (SELECT id FROM hotenken_dbs as h WHERE h.HAN_CODE = hotenken_dbs.HAN_CODE AND h.KOK_CODE = hotenken_dbs.KOK_CODE ORDER BY h.TYOU_YMD DESC Limit 1)')
    .group('hotenken_dbs.HAN_CODE,hotenken_dbs.KOK_CODE')

    #消費先の最も新しい調査日のレコードを取得する
    hoten03_sub_query = Hotenken03Db.select('hotenken03_dbs.H_CODE,hotenken03_dbs.K_CODE,hotenken03_dbs.TYOU_YMD,hotenken03_dbs.YOTEI_YMD')
    .where('id = (SELECT id FROM hotenken03_dbs as h03 WHERE h03.H_CODE = hotenken03_dbs.H_CODE AND h03.K_CODE = hotenken03_dbs.K_CODE ORDER BY h03.TYOU_YMD DESC Limit 1)')
    .group('hotenken03_dbs.H_CODE,hotenken03_dbs.K_CODE')

    #送信データ作成対象
    kokya1_db_search = Kokya1Db.select('kokya1_dbs.*')
    .select('sys.KEIYAKU_CD,sys.H_CODE AS SYS_H_CODE,sys.H_NAME2,sys.H_TEL,sys.KBN_HOAN,sys.PORTAL_KEIYAKU_YMD')
    .select('hoten.TYOU_YMD')
    .select('hoten03.TYOU_YMD as TYOU_YMD03,hoten03.YOTEI_YMD')
    .joins("LEFT OUTER JOIN sysf_dbs sys ON sys.H_CODE = kokya1_dbs.K_HAN")
    .joins("LEFT OUTER JOIN (#{hoten_sub_query.to_sql}) hoten ON hoten.HAN_CODE = kokya1_dbs.K_HAN AND hoten.KOK_CODE = kokya1_dbs.K_KOK")
    .joins("LEFT OUTER JOIN (#{hoten03_sub_query.to_sql}) hoten03 ON hoten03.H_CODE = kokya1_dbs.K_HAN AND hoten03.K_CODE = kokya1_dbs.K_KOK")
    .where('kokya1_dbs.PORTAL_LAST_SENDDATE IS NULL OR kokya1_dbs.PORTAL_LAST_SENDDATE < kokya1_dbs.updated_at')
    .where('sys.PORTAL_KEIYAKU_YMD IS NOT NULL').where('sys.PORTAL_KEIYAKU_YMD!=?', '')
    .where('kokya1_dbs.TEL_TEL IS NOT NULL').where('kokya1_dbs.TEL_TEL!=?', '')
    #1行目にヘッダー部出力
    header =
      [
        "会社コード",
        "部門コード",
        "お客様番号",
        "お客様名",
        "カナ",
        "決済方法名称",
        "クレジットカード種別",
        "クレジットカード番号",
        "クレジットカード有効期限",
        "グループコード1",
        "グループコード2",
        "グループコード3",
        "グループコード4",
        "グループコード5",
        "自動検針ハガキ一括発行区分",
        "最終更新日",
        "前回定期点検日",
        "次回定期点検予定月",
        "実施保安機関名",
        "実施保安機関連絡先",
        "利用開始日",
        "旧お客様番号",
        "認証キー"
      ]
    rows << header.join('","')
    #旧消費先で参照する実行前日のYMD
    @zen_day = df(DateTime.now.yesterday.to_s, format: '%Y%m%d').to_s 
    #処理の実行時間
    @ymd = DateTime.now
    #2行目以降のデータ行
    kokya1_db_search.each do |dbs|
      if all_hankaku(dbs.TEL_TEL.to_s.slice(-4,4).to_s) && !(dbs.TEL_TEL.to_s.slice(-4,4).to_s=~ /\p{katakana}/)
        rows << create_data(dbs).join('","')
      else
        #消費先マスタ「電話番号」が登録されていない場合はSQLで対象から除外されている
        #下4桁に半角英数字、記号以外が入っている場合,Portal連携対象から除外する
        @not_portal_list << dbs.id.to_s
        next
      end
    end
    #送信データ作成対象のデータ更新
    kokya1_db_search.where(@not_portal_list.length== 0 ? '' : 'NOT(kokya1_dbs.id IN (?))', @not_portal_list).update_all(PORTAL_LAST_SENDDATE: @ymd, updated_at: @ymd)
    File.open(Rails.root.join(Settings.portal_batch.send_path, 'user_mst.csv'), 'w:sjis:utf-8', crlf_newline: true) do |f|
    rows.each do |data|
        f.write( '"' + data + '"' + "\n")
      end
    end

  end

  def create_data dbs
    zen_tyousa   = ""
    jikai_tyousa = ""
    if dbs.KBN_HOAN == '1' 
      #新保安対象なら
      if dbs.TYOU_YMD03.blank?
        zen_tyousa = ""
      else
        zen_tyousa = df(dbs.TYOU_YMD03.to_s, format: '%F') #YYYY-MM-DD
      end
      if dbs.YOTEI_YMD.blank?
        jikai_tyousa = ""
      else
        jikai_tyousa = df(dbs.YOTEI_YMD.to_s, format: '%Y-%m') #YYYY-MM
      end
    else
      #新保安対象外なら
      if dbs.TYOU_YMD.blank?
        zen_tyousa = ""
      else
        zen_tyousa = df(dbs.TYOU_YMD.to_s, format: '%F') #YYYY-MM-DD
      end
    end
    #利用開始日
    if dbs.PORTAL_START_YMD.blank?
      start_ymd = ""
    else
      start_ymd = df(dbs.PORTAL_START_YMD.to_s, format: '%F') #YYYY-MM-DD
    end
    #最終更新日
    if dbs.PORTAL_LAST_SENDDATE.blank?
      #最終更新日がない場合、Portal連携した日を設定
      last_send = df(@ymd.to_s, format: '%F') #YYYY-MM-DD
    else
      last_send = df(dbs.PORTAL_LAST_SENDDATE.to_s, format: '%F') #YYYY-MM-DD
    end
    #旧お客様番号
    #消費先マスタの移動区分(KBN_MOVE)が「2:転出」かつ移動年月日が起動時間の年月日-1の場合
    if dbs.YMD_MOVE.blank?
      ymd_move = ''
    else
      ymd_move = dbs.YMD_MOVE
    end
    if (dbs.KBN_MOVE.to_s == "2") && (ymd_move.to_s == @zen_day.to_s)
      old_kok = dbs.K_MET
    else
      old_kok = ""
    end
    #認証キー
    key = dbs.TEL_TEL.to_s.slice(-4,4)
    #決済方法名称
    if dbs.KBN_SIHA.blank?
      siha_name = ""
    elsif dbs.KBN_SIHA.to_s == "1"
      siha_name = "集金"
    elsif dbs.KBN_SIHA.to_s == "2"
      siha_name = "振込"
    elsif dbs.KBN_SIHA.to_s == "3"
      siha_name = "口座振替"
    elsif dbs.KBN_SIHA.to_s == "4"
      siha_name = "コンビニ"
    elsif dbs.KBN_SIHA.to_s == "5"
      siha_name = "クレジットカード"
    elsif dbs.KBN_SIHA.to_s == "6"
      siha_name = "その他"
    elsif dbs.KBN_SIHA.to_s == "7"
      siha_name = "コンビニ"
    end

    row = []
    row = [
      dbs.KEIYAKU_CD.to_s,            #会社コード
      dbs.SYS_H_CODE.to_s,            #部門コード
      dbs.K_KOK.to_s,                 #お客様番号
      dbs.NAME.to_s,                  #お客様名
      dbs.KANA.to_s,                  #カナ
      siha_name.to_s,                 #決済方法名称
      "",                             #クレジットカード種別
      "",                             #クレジットカード番号
      "",                             #クレジットカード有効期限
      "",                             #グループコード1
      "",                             #グループコード2
      "",                             #グループコード3
      "",                             #グループコード4
      "",                             #グループコード5
      "",                             #自動検針ハガキ一括発行区分
      last_send.to_s,                 #最終更新日
      zen_tyousa.to_s,                #前回定期点検日
      jikai_tyousa.to_s,              #次回定期点検日
      dbs.H_NAME2.to_s,               #実施保安機関名
      dbs.H_TEL.to_s,                 #実施保安機関連絡先
      start_ymd.to_s,                 #利用開始日
      old_kok.to_s,                   #旧お客様番号
      key.to_s                        #認証キー
    ]
    # エンコードエラー対策として行生成時にエンコードを実行し、エラー対象文字は置換する
    return row.map{|x| 
      x.encode(
        Encoding::CP932, 
        invalid: :replace, 
        undef: :replace
      )
    }
  end

end
